@model FSD_P2_T02_Group2.Models.PostViewModel
@using Microsoft.AspNetCore.Http
@using Google.Cloud.Firestore;
@inject IHttpContextAccessor HttpContextAccessor

@{
    Layout = "_UserLayout";
    ViewData["Title"] = "Talents Recognition";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <title>Talents Recognition</title>
    <link href="~/css/talents.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <script src="https://cdn.firebase.com/js/client/2.0.6/firebase.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.2.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.2.1/firebase-firestore.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.2.1/firebase-analytics.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@200;500&display=swap" rel="stylesheet">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <link rel="stylesheet" href="~/lib/jquery-ui/jquery-ui.min.css">
    <link rel="stylesheet" href="~/css/material-design-iconic-font.min.css">
</head>

<body>
    <div class="row">
        <div class="col">
            <h3><u>Information Technology</u></h3>
        </div>
        <div class="col">

            @*<button onclick="myFunction()" class="dropbtn">Select Filter</button>*@
            @*<input type="text" placeholder="Search.." id="myInput" onkeyup="filterFunction()">*@
            @*<a href="#">Information Technology</a>
        <a href="#">Badmintion</a>*@
            <!--</div>-->
            <form id="widget-form" class="widget-post__form" name="form" aria-label="post widget" method="post" asp-action="Talents">

                @*<form asp-action="Talents" method="get">*@
                    <select asp-items="@ViewData["PostCategories"] as List<SelectListItem>" id="Category"
                            class="form-control" name="Category" asp-for="Category"></select>
                    @*<input type="radio" id="All" name="All" value="Information Technology">*@
                    @*<label for="All">All</label><br>
                <input type="radio" id="Art" name="Art" value="Art">
                <label for="Art">Art</label><br>
                <input type="radio" id="Information Technology" name="Information Technology" value="Information Technology">
                <label for="Information Technology">Information Technology</label>*@
                    @*<div class="form-group form-check-inline">
                @foreach (var item in ViewData["PostCategories"] as List<SelectListItem>)
                {
                    <label>
                        <input type="radio" value="@item.Value" id="category" name="category"/> @item.Value
                    </label>
                }
                </div>*@
                    <input type="submit" />
                </form>
        </div>
        </div>

    <div class="row">
        @if (HttpContextAccessor.HttpContext.Session.GetString("UserDP") != null)
        {
            <img src="@HttpContextAccessor.HttpContext.Session.GetString("UserDP")" class="rounded-circle" align="left" />
        }
        else
        {
        <img src="~/images/default_dp.jpg" class="rounded-circle" align="left" />
        }
        <div class="column">
            <div class="widget-post" aria-labelledby="post-header-title">
                <form id="widget-form" class="widget-post__form" name="form" aria-label="post widget" method="post" asp-action="Talents">
                    <div class="widget-post__content">
                        <label for="post-content" class="sr-only">Share</label>
                        <input id="post-content" class="widget-post__textarea scroller" placeholder="Share something..." asp-for="@Model.post.Description" />
                        <input hidden asp-for="@Model.Image" value="" />
                    </div>
                    <div class="widget-post__options is--hidden" id="stock-options">
                    </div>
                    <div class="widget-post__actions post--actions">
                        <div class="post-actions__attachments">
                            <button type="button" class="btn post-actions__upload attachments--btn">
                                <label for="upload-image" class="post-actions__label">
                                    <i class="fa fa-upload" aria-hidden="true"></i>
                                    <img src="~/images/photoicon.JPG">
                                    upload image/video
                                </label>
                            </button>
                            <input type="file" id="upload-image" accept="image/*" onchange="getBase64Image(this)" />
                            <input type="hidden" id="uploadImg" name="uploadImg" />
                        </div>
                        <select asp-for="post.Tag"
                                asp-items="@ViewData["PostCategories"]
                            as List<SelectListItem>"
                                class="form-control">
                        </select>
                        <div class="post-actions__widget">
                            <button class="btn post-actions__publish" type="submit">Publish</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

            @foreach (PostViewModel p in TempData.Get<List<PostViewModel>>("Posts"))
            {
                <div class="container" style="background:#C8D8F8">
                <p>@p.post.Description</p>

                @{
                int userId = (int)HttpContextAccessor.HttpContext.Session.GetInt32("UserID");
                if (p.post.Likes != null)
                {
                    bool liked = false;
                    for (int i = 0; i < p.post.Likes.Length; i++)
                    {
                        if (p.post.Likes[i] == userId)
                        {
                            <img src="~/images/heart_shaded.svg" onclick="dislike(@p.id, @p.post.Tag, @userId)" />
                            liked = true;
                            break;
                        }
                    }
                    if (liked is false)
                    {
                    <img src="~/images/heart_unshaded.svg" onclick="like(@p.id, @p.post.Tag, @userId)" />
                    }
                    <p>@p.post.Likes.Count() likes</p>
                }

                else
                {
                    <img src="~/images/heart_unshaded.svg" onclick="like(@p.id, @p.post.Tag, @userId)"/>
                    <p>0 likes</p>
                }
                @if (p.post.hasMedia is true)
                {
                    <h2>Media:</h2>
                    <img src="@p.Image.ToString()" id="postsImages" />
                }
                <p>@p.post.TimeCreated</p>
                @if (p.post.Tag != null)
                {
                    <h2>Tags:</h2>
                    <p>@p.post.Tag</p>
                }
            }
            </div>
    }
<script>
        function myFunction() {
            document.getElementById("myDropdown").classList.toggle("show");
        };

        function filterFunction() {
            var input, filter, ul, li, a, i;
            input = document.getElementById("myInput");
            filter = input.value.toUpperCase();
            div = document.getElementById("myDropdown");
            a = div.getElementsByTagName("a");
            for (i = 0; i < a.length; i++) {
                txtValue = a[i].textContent || a[i].innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    a[i].style.display = "";
                } else {
                    a[i].style.display = "none";
                }
            }
        };
        $("#Category").on("change", function () {
            var q = $("#Category").val();
            console.log("val = " + q);
            $("#chosenCat").val($(q));
            console.log($("#chosenCat").val);
        });

        //$("#choosemyCat").on("change", function() {
        //    $("#chosenCat").val($(this).text());
        //    console.log($("#chosenCat").val)
        //});

        function getBase64Image(element) {
            var file = element.files[0];
            var reader = new FileReader();
            reader.onloadend = function () {
                localStorage.setItem("uploadImg", reader.result);
            }
            console.log(localStorage.getItem("uploadImg"));

            reader.readAsDataURL(file);
            document.getElementById("uploadImg").value = localStorage.getItem("uploadImg");
        };


        var firebaseConfig = {
            apiKey: "AIzaSyB_3YSraE6XM9lB-Va12Q36Gxmu19Mju8U",
            authDomain: "fir-chat-ukiyo.firebaseapp.com",
            databaseURL: "https://fir-chat-ukiyo-default-rtdb.firebaseio.com",
            projectId: "fir-chat-ukiyo",
            storageBucket: "fir-chat-ukiyo.appspot.com",
            messagingSenderId: "1003455832615"
        };
        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        var postDB = firebase.firestore();

        function dislike(postId, postCat, userId) {
            postDB.collection("Posts").document("Category")
                .collection(postCat).document(postId).update
                ({ ['Likes.' + userId]: firebase.firestore.FieldValue.delete() });
        }

        function like(postId, postCat, userId) {
            postDB.collection("Posts").document("Category")
                .collection(postCat).document(postId)
                .set(
                    { Likes: [{ userId }] },
                    { merge: true }
                );
        };

        //document.querySelector("upload-image").onchange = function (e) {
        //    var file = e.target.files[0],                  // reference first file BLOB
        //        url = URL.createObjectURL(file),           // create an Object URL
        //        img = new Image();                         // create a temp. image object

        //    img.onload = function () {                    // handle async image loading
        //        URL.revokeObjectURL(this.src);             // free memory held by Object URL
        //        c.getContext("2d").drawImage(this, 0, 0);  // draw image onto canvas (lazy method™)
        //    };

        //};

</script>
</body>

</html>